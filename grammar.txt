# Nebula Language Grammar

1. Comments start with $.
2. Newline to terminate statements.
3. Data Types Supported: integer, decimal, bool, string
4. Variable Declaration:
    integer i, j=0
    decimal d, e=1.5
    bool b, t=True, f=False
    string s, s2="some string"
5. Variable Naming Rules:
    Start with an alphabet or underscore (_).
    Can include alphanumeric characters and underscores (_). Naming rule (regex): [a-zA-Z_][a-zA-Z0-9_]*
6. Variable Assignment:
    i = 20
    d = 10.2
    b = True
    s = "another string"
7. Expressions:
    Unary Expression:
        not b
        - i
    Binary Expression:
        i + 1 - j * d
        b or t and f
    Ternary Expression:
        conditional_expr && true_case || false_case
8. Conditional Statements:
    if conditional_expr {

    }
    else if conditional_expr {

    }
    else{

    }
9. Loops:
    For Loops:
        for i from 1 to 10 {

        }
    While Loops:
        while conditional_expr {

        }
10. Functions:
    fun func_name (type param, type param) returns return_type return_var_name {
        compute return_var_name here
        its automatically returned
    }
11. Function Invocation:
    func_name()
    func_name(params)
    return_type var_name = func_name(params)
12. Operators:
    Unary_operators:
        not
        -
    Binary_operators:
        +
        -
        *
        /
        %
        **
        >
        >=
        <
        <=
        ==
        !=
        or
        and
13. Operator Precedence: just like C.
14. Input:
    scan x $ scans and assigns based on data_type of x

15. Output:
display x, y, z $ ... each separated by a space ... automatic:('\n') at end
